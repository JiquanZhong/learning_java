package com.liaoxuefeng.chapter10;

/**
 * @author ZHONG Jiquan
 * @create 12/08/2023 - 17:02
 */
public class DataStructureDemo {
	public static void main(String[] args) {

	}
	/**
	 * MySQL的B+树数据结构
	 * MySQL是基于B+树实现数据的存储结构。
	 */

	/**
	 * B+树，多路平衡查找树。一个节点有多个子节点，多个子节点按节点索引顺序排列。但完整的数据只存储在叶子结点上。
	 * 同时使用了双向链表的形式把叶子结点的数据串联起来。
	 */

	/**
	 * B树，也是多路查找树，区别在于每个节点都存了完整的记录数据。
	 * 为什么使用B+树而不是B树，有以下几点原因。
	 * 1. 磁盘IO方面。Mysql中数据以数据页的方式存储在硬盘，一页的数据是16KB。进行查找时，需要进行随机IO把数据页加载进内存，
	 * 而IO操作一次会加载4KB或8KB（取决于操作系统的架构）进buffer pool，如果没有找到对应的数据页，则继续执行IO操作。也就是说，单次IO获取的
	 * 记录信息是固定大小的。B+树由于非叶子节点不包含数据，所以单个非叶子节点的大小更小，一次IO可以查找的信息更大。可以但最小的IO次数下找到对应的数据页。
	 * 2. 范围查询方面。由于MySQL需要经常执行范围查找任务。由于B+树底层使用双向链表按顺序连接数据。所以对于一次范围查找，使用B+树只需要查找
	 * 到两个边缘节点，再对链表进行部分遍历就可以
	 * 3. 全表扫描方面。链表顺序存储的数据天然就适合全表扫描。
	 * 4. 页分裂方面。建立索引的时候，只需要严格使用自增id就可以避免叶子结点分裂导致的大量计算。
	 */

	/**
	 * AVL和红黑树的区别
	 * AVL是二叉平衡查找树，有以下特点
	 * 1. 左节点比节点小，右节点比节点大。
	 * 2. 左子树和右子树的高度差不大于1。
	 * AVL根据对树高的条件限制使其避免单边树高过大的问题，能让数据均匀地分布在树上，提升二分查找的效率。
	 * 但劣势是，如果有新的数据插入需要通过交换和翻转维护树的顺序结构，这个过程比较消耗内存资源。
	 * 红黑树也是二叉查找树，有以下特点
	 * 1. 每个节点多一个颜色属性，红色和黑色。
	 * 2. 红节点的一定有两个黑子节点
	 * 3. 叶子结点一定是黑节点，没有则插入nil
	 * 4. 任意节点到叶子结点的黑色节点数一定相等
	 * 5. 根节点为黑节点
	 * 红黑树通过以上限制条件，保证了新插入数据后的翻转次数不超过三次。同时保证了左右树高差距不会过大。
	 * 适用于插入频繁的场景。最坏情况下的查找，插入和删除操作都是log(n)
	 */

	/**
	 *
	 */
}
